c
с
user.reload.log_data
user.reload.log_data.meta
exit
user.reload.log_data
user.reload.log_data.meta
exit
user.reload.log_data
exit
user.reload
article.touch(time: 1.minute.since)
user.reload
article.reload
article
user
exit
user.reload
          Logidze.with_meta({ test: 1 }, transactional: false) do
            article.touch(time: 1.minute.since)
          end
user.changes
user.reload
user.changes
          Logidze.with_meta(meta, transactional: false) do
            article.touch(time: 1.minute.since)
          end
user.reload
user.changes
article.reload.changes
article.reload.log
article.reload
c
user.touch
exit
учше
user.reload.log_data
          Logidze.with_meta(meta, transactional: false) do
            article.touch(time: 1.minute.since)
          end
user.reload.log_data
article.reload
user.reload.log_data
user.reload.log_data.meta
c
meta
user.reload.log_data.meta
pp user.reload.log_data
c
pp user.reload.log_data
sql 'select @logidze.meta\;'
sql 'select @logidze.meta;'
sql 'select @logidze.meta''
pp user.reload.log_data
exit
pp user.reload.log_data
          Logidze.with_meta(meta, transactional: false) do
            article.touch(time: 1.minute.since)
          end
pp user.reload.log_data
user.reload.log_data
user.reload.log_data.size
article.reload.log_data
user.reload.log_data.size
          Logidze.with_meta(meta, transactional: false) do
            article.touch(time: 1.minute.since)
          end
user.reload.log_data.size
user.reload.log_data.changes
user.reload.log_data.history
user.reload.log_data
user.reload
article.reload.log_data
article.reload.log_Data
article.reload
user.reload.log_data
exit
          Logidze.with_meta(meta, transactional: false) do
            article.touch(time: 1.minute.since)
          end
Thread.current[:meta]
          Logidze.with_meta(meta, transactional: false) do
            article.update(time: 1.minute.since)
          end
user.reload.log_data
user.reload.log_data.meta
         Logidze.with_meta(meta) do
            article.touch(time: 1.minute.since)
          end
meta
user.reload.log_data
c
subject.reload.log_size
exit
pp subject.log_data
subject.log_data
subject.
subject.reload.log_size
subject.reload
subject
exit
(1695475938 / 100) - 616098213
1695475938 / 100 - 616098213
1695475938 - 616098213
now.to_i
sql "select UNIX_TIMESTAMP(LOCALTIMESTAMP)"
sql "select LOCALTIMESTAMP"
now.to_i
now.strftime("%Y-%m-%d %H:%M:%S").to_i
now.strftime("%Y-%m-%d %H:%M:%S").to_unix
now.strftime("%Y-%m-%d %H:%M:%S").to_uniq
now.strftime("%Y-%m-%d %H:%M:%S")
now
Time.now.strftime("%Y-%m-%d %H:%M:%S")
Time.now.strftime("%Y-%m-%d %H:%M:%S"
exit
connection.execute("SELECT JSON_KEYS(JSON_UNQUOTE(#{encode_meta(value)}))\;").first
value.to_json
            connection.execute("SELECT JSON_UNQUOTE('#{value.to_json}')\;").first
            connection.execute("SELECT JSON_UNQUOTE('#{value.to_json}')\;")
connection.execute("SELECT JSON_UNQUOTE(JSON_UNQUOTE(#{encode_meta(value)}))\;").first
connection.execute("SELECT JSON_UNQUOTE(#{encode_meta(value)})\;").first
connection.execute("SELECT JSON_UNQUOTE(#{encode_meta(value)})\;")
connection.execute("SELECT JSON_UNQUOTE('#{encode_meta(value)}')\;")
"SELECT JSON_UNQUOTE('#{encode_meta(value)}')\;"
"SET @logidze.meta = JSON_UNQUOTE('#{encode_meta(value)}')\;"
puts "SET @logidze.meta = JSON_UNQUOTE('')\;"
puts "SET @logidze.meta = JSON_UNQUOTE('')"
puts "SET @logidze.meta = JSON_UNQUOTE('');"
"SET @logidze.meta = JSON_UNQUOTE('');"
"SET @logidze.meta = JSON_UNQUOTE(\'#{ encode_meta(value) }\');"
"SET @logidze.meta = JSON_UNQUOTE('#{encode_meta(value)}');"
"SET @logidze.meta = JSON_UNQUOTE('#{encode_meta(value)}');"'
value.to_json
encode_meta(value)
"SET @logidze.meta = JSON_UNQUOTE('#{encode_meta(value)}');"
exit
snapshot
now.to_s(:db)
now
Time.at(version["ts"] / 1000)
Time.at(version["ts"] / 1000) - now
1.year.to_i
.to_i
1.year
(Time.at(version["ts"] / 1000))
now
(version["ts"] / 1000) 
(version["ts"] / 1000) - now
(Time.at(version["ts"] / 1000) - now)
version["ts"]
exit
sql "select logidze_compact_history(JSON_UNQUOTE(#{data}), 5)"
sql "select logidze_compact_history(JSON_UNQUOTE(#{data}), 3)"
sql "select logidze_compact_history(JSON_UNQUOTE(#{data}), NULL)"
data
sql "select logidze_compact_history(JSON_UNQUOTE(#{data}), NULL)"
sql "select logidze_compact_history(JSON_UNQUOTE(#{data}), 1)"
sql "select logidze_compact_history(JSON_UNQUOTE(#{data}), 2)"
JSON.parse(res)['v']
JSON.parse(res)['h']
JSON.parse(res)['h'].count
JSON.parse(res)['h']
exit
EXIT
JSON.parse(res)['h']
JSON.parse(res)
var hist
v hist
hist
exit
ActiveRecord::Base.connection.exec_query(from_db_query).each {  |e| print e.class }
ActiveRecord::Base.connection.exec_query(from_db_query)
ActiveRecord::Base.connection.execute(from_db_query)
row.class
row.clas
row
exit
from_db_query
row
c
snapshot
exit
EXIT
snapshot
exit
snapshot
c
post.log_data.versions.first.changes
post.log_data.versions.fist.changes
post.log_data.versions.last.changes
exit
post.log_data.versions.first.changes
post.log_data.versions.last.changes
post.log_data.versions.last
post.log_data.versions
post.log_data.version_filter
post.log_data.changes_to(version: 2, data: base, from: 2)
post.log_data.changes_to(version: 2, data: base, from: 1)
post.log_data.version
base = post.log_data.changes_to(version: 1)
post.log_data.changes_to(version: 1)
post.log_data.changes_to(1)
post.log_data.find_by_version(1)
post.log_data.diff_from(version: 1)
post.log_data
post.log.data
post.find_by_version(1)
post.reload.diff_from(version: 1)
post.reload.log_version
post.reload.diff_from(version: (post.reload.log_version - 1))
post
exit
snapshot['h'][0]['c']
snapshot['h'][0]
snapshot['h']
snapshot['h''
snapshot
snapshot = JSON.parse(post.read_attribute_before_type_cast(:log_data))
diff
c
exit
successfully "rails generate logidze:model Movie --only=title"
system "rails generate logidze:model Movie"
successfully "rails generate logidze:model Movie"
exit
system 'rails generate logidze:install'
exit
EXIT
system 'rails generate logidze:install'
